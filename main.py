import pandas as pd
import google.generativeai as genai
import json
import streamlit as st
import io
import tempfile
import os

# Tentar carregar a chave da API do Streamlit Secrets ou vari√°vel de ambiente
try:
    api_key = st.secrets["google"]["api_key"]
except (AttributeError, KeyError):
    api_key = os.getenv("GOOGLE_API_KEY")  # Buscar em vari√°veis de ambiente

# Validar se a chave foi encontrada
if not api_key:
    st.error("üî¥ ERRO: A chave da API do Google n√£o foi encontrada! Defina no `.streamlit/secrets.toml` ou como vari√°vel de ambiente `GOOGLE_API_KEY`.")
    st.stop()

# Configurar API com a chave encontrada
genai.configure(api_key=api_key)
    
def extrair_informacoes(file_bytes, mime_type) -> (pd.DataFrame, bool):
    """
    Envia um arquivo para a API do Google Gemini e retorna um DataFrame estruturado.

    :param file_bytes: Conte√∫do do arquivo (bytes).
    :param mime_type: Tipo MIME do arquivo (exemplo: "application/pdf", "image/png").
    :return: DataFrame contendo os dados extra√≠dos.
    """
    try:
        # Criando um arquivo tempor√°rio na mem√≥ria
        file_obj = io.BytesIO(file_bytes)

        # Faz upload do arquivo para a API (sem 'file_name')
        uploaded_file = genai.upload_file(file_obj, mime_type=mime_type)

        # Prompt otimizado
        prompt = """
        Voc√™ √© um assistente especializado em **extra√ß√£o de dados financeiros** com foco em **an√°lise e processamento de extratos banc√°rios** de diferentes formatos e modelos.

                **Objetivo**:  
                Converter as informa√ß√µes do extrato banc√°rio em um **JSON bem estruturado e validado**, garantindo que os campos sejam coerentes e que **n√£o haja erros de formata√ß√£o**.

                **Instru√ß√µes**:
                Extraia os dados e retorne um JSON **validado e bem formatado**, garantindo que:
                    - Nenhum campo seja cortado.
                    - O JSON seja **sempre fechado corretamente**.
                    - **Nunca** retorne JSON truncado. Se necess√°rio, adicione `]` no final para garantir integridade.
                    - Os valores num√©ricos tenham **ponto como separador decimal**.
                    - Se houver erro, retorne **[]** (um array vazio) ao inv√©s de um JSON inv√°lido.
                    - Remova caracteres especiais ou trechos irrelevantes antes de retornar a resposta.
                    
                **Estrutura esperada do JSON**:
                    "Data": "DD/MM/AAAA",
                    "Hist√≥rico": "Descri√ß√£o da transa√ß√£o, por exemplo: Transfer√™ncia, Pagamento, Compra, IOF, Pix enviado",
                    "Documento": "N√∫mero do documento da transa√ß√£o, se dispon√≠vel. Caso contr√°rio, manter vazio.",
                    "D√©bito/Cr√©dito": "D para D√©bito, C para Cr√©dito",
                    "Valor": "Valor da transa√ß√£o com at√© 2 casas decimais, negativo para D√©bito, positivo para Cr√©dito",
                    "Origem/Destino": "Nome da pessoa ou empresa envolvida na transa√ß√£o, se dispon√≠vel",
                    "Banco": "Nome do banco ou institui√ß√£o financeira do extrato"

        """

        # Solicita√ß√£o √† API
        response = genai.GenerativeModel("gemini-2.0-flash-exp").generate_content(
            [prompt, uploaded_file],
            generation_config={
                "temperature": 1,
                "top_p": 0.95,
                "top_k": 40,
                "max_output_tokens": 8192,
                "response_mime_type": "application/json"}
        )
        print(f"#### Response: {response}")

        # üõ†Ô∏è Identificar se houve truncamento por limite de tokens
        foi_truncado = False
        response_dict = response.to_dict()
        if response_dict.get("candidates", [{}])[0].get("finish_reason") == "MAX_TOKENS":
            foi_truncado = True
            

        # üîπ Tratamento e valida√ß√£o do JSON üîπ
        try:
            json_data = response.text.strip()

            # üõ†Ô∏è Corrigir JSON truncado removendo a √∫ltima entrada incompleta
            if not json_data.startswith("[") or not json_data.endswith("]"):
                json_data = json_data[:json_data.rfind("},") + 1] + "]"  # Remover entrada cortada e fechar JSON

            # Se ainda estiver truncado, for√ßamos o fechamento
            if not json_data.endswith("]"):
                json_data += "]"

            # Convers√£o para JSON
            data = json.loads(json_data)

            # Valida√ß√£o final: precisa ser uma lista de dicion√°rios
            if not isinstance(data, list) or not all(isinstance(item, dict) for item in data):
                raise ValueError("A resposta da API n√£o est√° no formato esperado.")

            return pd.DataFrame(data), foi_truncado

        except (json.JSONDecodeError, ValueError) as e:
            st.error(f"Erro ao processar o JSON: {e}")
            return pd.DataFrame(), False

    except Exception as e:
        st.error(f"Erro ao processar o arquivo: {e}")
        return pd.DataFrame(), False
    
    
# Configura√ß√£o da p√°gina
st.set_page_config(page_title='Extrato IA', layout='wide')
st.title('Extrato IA - Processamento Inteligente de Arquivos')
st.write('Fa√ßa o upload de arquivos PDF, Imagem, Texto ou CSV para extrair informa√ß√µes.')

# Upload de arquivos
uploaded_files = st.file_uploader("Carregue arquivos PDF, Imagem, Texto ou CSV", 
                                  type=['pdf', 'png', 'jpg', 'jpeg', 'txt', 'csv'], 
                                  accept_multiple_files=True)

if uploaded_files:
    for uploaded_file in uploaded_files:
        st.subheader(f"üìÑ Processando: {uploaded_file.name}")
        
        # Obtendo os bytes e tipo MIME do arquivo
        file_bytes = uploaded_file.read()
        mime_type = uploaded_file.type

        # Enviando o arquivo para a API
        st.write(f"üîÑ Extraindo dados do arquivo ({mime_type})...")

        dados_extrato, foi_truncado = extrair_informacoes(file_bytes, mime_type)

        # üîπ Exibir aviso de truncamento antes de qualquer outro status üîπ
        if foi_truncado:
            st.warning("‚ö†Ô∏è A resposta foi cortada devido ao limite de tokens! Apenas as transa√ß√µes completas foram extra√≠das.")

        # Exibir os dados extra√≠dos
        if not dados_extrato.empty:
            st.success("‚úÖ Extra√ß√£o conclu√≠da!")
            st.dataframe(dados_extrato)
        else:
            st.warning("‚ö†Ô∏è Nenhuma informa√ß√£o extra√≠da. Tente outro arquivo.")
